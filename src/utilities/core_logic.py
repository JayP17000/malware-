"""
    Date created:   12/01/2023
    Date edited:    12/01/2023
    Sub-module:     core_logic.py
    Remarks:        program entry
"""
import os
import sys
import yara

from PySide6.QtWidgets import QApplication, QMainWindow, QFileDialog
import src.frames.py.gui_main as mn
import src.frames.py.gui_results as rs

# Global Variables
CURRENT_PATH = None
CURRENT_FILE = None
RULE_PATH = None


class ui_main(QMainWindow, mn.Ui_MainWindow):
    """
        Remarks: Main window frame declaration and definition.
    """

    def __init__(self):
        """
            Remarks:
        """

        super().__init__()
        # Set
        self.setupUi(self)
        self.GUI_RESULTS = ui_results()
        self._connect_signals_to_slots()
        self._retrieve_yara_lib()

    def _retrieve_yara_lib(self):
        path = os.getcwd()
        RULE_PATH = os.path.join(path, "/src/utilities/yara_rules")
        print(str(RULE_PATH))

    def _connect_signals_to_slots(self):
        """
            Remarks:
        """
        # Results Triggers
        # Button "Show" trigger event.
        self.btnShow.clicked.connect(self.GUI_RESULTS.display_results_window)

        # Button "Save" trigger event.

        # Directory Triggers
        # Button "Open" trigger event.
        self.btnOpen.clicked.connect(self._get_directory_path)
        self.actionOpen.triggered.connect(self._get_directory_path)

        # Scan Triggers
        # Button "Start" trigger event.
        self.btnSave.clicked.connect(self._run_yara)

        # Button "Cancel" trigger event.

    def _get_directory_path(self):
        """
            Remarks:
        """
        # options = QFileDialog.options()
        CURRENT_PATH = QFileDialog.getExistingDirectory(
            None,
            "Select a Directory",
            "",
            QFileDialog.ShowDirsOnly | QFileDialog.DontResolveSymlinks
        )
        if CURRENT_PATH:
            # print("Current Directory: ", CURRENT_PATH)
            self.lblPathCont.setText(CURRENT_PATH)

    # def _start_scan(self):
    def _run_yara(self, rules_file, target_directory):
        # Load YARA rules from the file
        rules = yara.compile(rules_file)

        # Iterate through files in the target directory
        for filename in os.listdir(target_directory):
            file_path = os.path.join(target_directory, filename)

            # Check if the item is a file (not a directory)
            if os.path.isfile(file_path):
                with open(file_path, 'rb') as f:
                    file_content = f.read()

                # Match the rules against the file content
                matches = rules.match(data=file_content)

                # Print the results
                if matches:
                    print(f"Malicious indicators found in {filename}:")
                    for match in matches:
                        print(f"- Rule: {match.rule}")
                else:
                    print(f"No malicious indicators found in {filename}.")


class ui_results(QMainWindow, rs.Ui_MainWindow):
    """
        Remarks:
    """

    def __init__(self):
        """
            Remarks:
        """
        super().__init__()
        self.setupUi2(self)

    # def connect_signals_to_slots(self):
    #     pass

    def display_results_window(self):
        """
            Remarks:
        """
        self.show()


def run_program():
    """
        Remarks:
    """
    app = QApplication([])
    app.setStyle('Fusion')

    window = ui_main()
    window.show()

    sys.exit(app.exec())
